{
    "Comment": "v4 - Two business types",
    "StartAt": "Check Dimensions",
    "States": {
        "Check Dimensions": {
            "Next": "Dimensions Result?",
            "Resource": "${DimensionsFunctionArn}",
            "Type": "Task"
        },
        "Check for people": {
            "Choices": [
                {
                    "Next": "Resizer",
                    "NumericEquals": 0,
                    "Variable": "$.totalPeople"
                }
            ],
            "Default": "RecordFailState",
            "Type": "Choice"
        },
        "Dimensions Result?": {
            "Choices": [
                {
                    "BooleanEquals": true,
                    "Next": "Get place type from DynamoDB",
                    "Variable": "$.dimensionsResult"
                },
                {
                    "BooleanEquals": false,
                    "Next": "RecordFailState",
                    "Variable": "$.dimensionsResult"
                }
            ],
            "Default": "RecordFailState",
            "Type": "Choice"
        },
        "Get labels": {
            "Next": "Check for people",
            "Resource": "${LabelsFunctionArn}",
            "Type": "Task"
        },
        "Get place type from DynamoDB": {
            "Next": "Place type?",
            "Parameters": {
                "Key": {
                    "PK": {
                        "S.$": "$.detail.placeId"
                    },
                    "SK": {
                        "S": "listing"
                    }
                },
                "TableName": "${DDBTable}"
            },
            "Resource": "${DDBGetItem}",
            "ResultPath": "$.placeRecord",
            "Type": "Task"
        },
        "Moderation Result?": {
            "Choices": [
                {
                    "BooleanEquals": true,
                    "Next": "Resizer",
                    "Variable": "$.moderationResult"
                },
                {
                    "BooleanEquals": false,
                    "Next": "RecordFailState",
                    "Variable": "$.moderationResult"
                }
            ],
            "Default": "RecordFailState",
            "Type": "Choice"
        },
        "Moderator": {
            "Next": "Moderation Result?",
            "Resource": "${ModeratorFunctionArn}",
            "Type": "Task"
        },
        "Place type?": {
            "Choices": [
                {
                    "Next": "Moderator",
                    "StringEquals": "park",
                    "Variable": "$.placeRecord.Item.type.S"
                },
                {
                    "Next": "Get labels",
                    "StringEquals": "restaurant",
                    "Variable": "$.placeRecord.Item.type.S"
                },
                {
                    "Next": "Get labels",
                    "StringEquals": "cafe",
                    "Variable": "$.placeRecord.Item.type.S"
                },
                {
                    "Next": "Get labels",
                    "StringEquals": "bar",
                    "Variable": "$.placeRecord.Item.type.S"
                }
            ],
            "Default": "RecordFailState",
            "Type": "Choice"
        },
        "Publish": {
            "End": true,
            "Parameters": {
                "FunctionName": "${PublishFunctionArn}",
                "Payload": {
                    "Input.$": "$"
                }
            },
            "Resource": "arn:aws:states:::lambda:invoke",
            "Type": "Task"
        },
        "RecordFailState": {
            "End": true,
            "Parameters": {
                "ExpressionAttributeValues": {
                    ":detail": {
                        "S.$": "$.workflowDetail"
                    },
                    ":newStatus": {
                        "S": "REJECTED"
                    }
                },
                "Key": {
                    "PK": {
                        "S": "workflow"
                    },
                    "SK": {
                        "S.$": "$.detail.ID"
                    }
                },
                "TableName": "${DDBTable}",
                "UpdateExpression": "set objStatus = :newStatus, detail = :detail"
            },
            "Resource": "${DDBUpdateItem}",
            "Type": "Task"
        },
        "Resizer": {
            "Next": "Publish",
            "Resource": "${ResizerFunctionArn}",
            "Type": "Task"
        }
    }
}