{
    "StartAt": "Create idempotency settings (key and ttl)",
    "States": {
        "Create and lock idempotency record": {
            "Catch": [
                {
                    "ErrorEquals": [
                        "DynamoDb.TransactionCanceledException"
                    ],
                    "Next": "Get idempotency record from DynamoDB",
                    "ResultPath": "$.errors.lockItem"
                }
            ],
            "Next": "Your Workflow",
            "Parameters": {
                "TransactItems": [
                    {
                        "Update": {
                            "ConditionExpression": "attribute_not_exists(#s) or #s = :failed",
                            "ExpressionAttributeNames": {
                                "#e": "execution",
                                "#s": "executionstatus",
                                "#st": "starttime",
                                "#ttl": "ttl"
                            },
                            "ExpressionAttributeValues": {
                                ":e": {
                                    "S.$": "$$.Execution.Id"
                                },
                                ":failed": {
                                    "S": "FAILED"
                                },
                                ":inprogress": {
                                    "S": "IN_PROGRESS"
                                },
                                ":st": {
                                    "S.$": "$$.Execution.StartTime"
                                },
                                ":ttl": {
                                    "N.$": "$.idempotencyConfig.ttl"
                                }
                            },
                            "Key": {
                                "id": {
                                    "S.$": "$.idempotencyConfig.idempotencyKey"
                                }
                            },
                            "TableName": "IdempotentStepfunctionsWorkflowStack-IdempotentStepfunctionsWorkflowIdempotencyTable276F57BD-VXO568YJ8PJ7",
                            "UpdateExpression": "set #s = :inprogress, #e = :e, #st = :st, #ttl = :ttl"
                        }
                    }
                ]
            },
            "Resource": "arn:aws:states:::aws-sdk:dynamodb:transactWriteItems",
            "ResultPath": null,
            "Retry": [
                {
                    "BackoffRate": 2,
                    "ErrorEquals": [
                        "DynamoDb.ProvisionedThroughputExceededException",
                        "DynamoDb.RequestLimitExceeded",
                        "DynamoDb.ThrottlingException"
                    ],
                    "IntervalSeconds": 3,
                    "MaxAttempts": 10
                }
            ],
            "Type": "Task"
        },
        "Create idempotency settings (key and ttl)": {
            "Next": "Create and lock idempotency record",
            "Resource": "arn:aws:lambda:eu-central-1:513725428015:function:IdempotentStepfunctionsWo-IdempotentStepfunctionsW-bURHFStl0ZL3",
            "ResultPath": "$",
            "Retry": [
                {
                    "BackoffRate": 2,
                    "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 6
                },
                {
                    "BackoffRate": 2,
                    "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException",
                        "Lambda.TooManyRequestsException"
                    ],
                    "IntervalSeconds": 3,
                    "MaxAttempts": 10
                }
            ],
            "Type": "Task"
        },
        "De-serialize previous results": {
            "Next": "Success",
            "OutputPath": "$.previous_results",
            "Parameters": {
                "previous_results.$": "States.StringToJson($.idempotencyTable.Item.executionresult.S)"
            },
            "Type": "Pass"
        },
        "Failure": {
            "Cause": "The child workflow failed. The full exception is available in DynamoDB",
            "Error": "ChildWorkflowException",
            "Type": "Fail"
        },
        "Get idempotency record from DynamoDB": {
            "Next": "Previous or concurrent execution SUCCEEDED, IN_PROGRESS, or FAILED?",
            "Parameters": {
                "ConsistentRead": false,
                "Key": {
                    "id": {
                        "S.$": "$.idempotencyConfig.idempotencyKey"
                    }
                },
                "ProjectionExpression": "executionstatus,executionresult",
                "TableName": "IdempotentStepfunctionsWorkflowStack-IdempotentStepfunctionsWorkflowIdempotencyTable276F57BD-VXO568YJ8PJ7"
            },
            "Resource": "arn:aws:states:::dynamodb:getItem",
            "ResultPath": "$.idempotencyTable",
            "Retry": [
                {
                    "BackoffRate": 2,
                    "ErrorEquals": [
                        "DynamoDb.ProvisionedThroughputExceededException",
                        "DynamoDb.RequestLimitExceeded",
                        "DynamoDb.ThrottlingException"
                    ],
                    "IntervalSeconds": 3,
                    "MaxAttempts": 10
                }
            ],
            "Type": "Task"
        },
        "Previous or concurrent execution SUCCEEDED, IN_PROGRESS, or FAILED?": {
            "Choices": [
                {
                    "And": [
                        {
                            "StringEquals": "SUCCEEDED",
                            "Variable": "$.idempotencyTable.Item.executionstatus.S"
                        },
                        {
                            "IsPresent": true,
                            "Variable": "$.idempotencyTable.Item.executionresult.S"
                        }
                    ],
                    "Next": "De-serialize previous results"
                },
                {
                    "Next": "Create and lock idempotency record",
                    "StringEquals": "FAILED",
                    "Variable": "$.idempotencyTable.Item.executionstatus.S"
                },
                {
                    "Next": "Still IN_PROGRESS, wait for 10s",
                    "StringEquals": "IN_PROGRESS",
                    "Variable": "$.idempotencyTable.Item.executionstatus.S"
                }
            ],
            "Default": "Undefined execution state in idempotency record",
            "Type": "Choice"
        },
        "Save execution results": {
            "Next": "Success",
            "OutputPath": "$.results",
            "Parameters": {
                "ExpressionAttributeNames": {
                    "#r": "executionresult",
                    "#s": "executionstatus"
                },
                "ExpressionAttributeValues": {
                    ":r": {
                        "S.$": "States.JsonToString($.results)"
                    },
                    ":s": {
                        "S": "SUCCEEDED"
                    }
                },
                "Key": {
                    "id": {
                        "S.$": "$.idempotencyConfig.idempotencyKey"
                    }
                },
                "TableName": "IdempotentStepfunctionsWorkflowStack-IdempotentStepfunctionsWorkflowIdempotencyTable276F57BD-VXO568YJ8PJ7",
                "UpdateExpression": "SET #s = :s, #r = :r"
            },
            "Resource": "arn:aws:states:::dynamodb:updateItem",
            "ResultPath": "$.idempotencyTable.updateResult",
            "Retry": [
                {
                    "BackoffRate": 2,
                    "ErrorEquals": [
                        "DynamoDb.ProvisionedThroughputExceededException",
                        "DynamoDb.RequestLimitExceeded",
                        "DynamoDb.ThrottlingException"
                    ],
                    "IntervalSeconds": 3,
                    "MaxAttempts": 10
                }
            ],
            "Type": "Task"
        },
        "Save failure": {
            "Next": "Failure",
            "OutputPath": "$.errors.childworkflow",
            "Parameters": {
                "ExpressionAttributeNames": {
                    "#r": "executionresult",
                    "#s": "executionstatus"
                },
                "ExpressionAttributeValues": {
                    ":r": {
                        "S.$": "States.JsonToString($.errors.childworkflow)"
                    },
                    ":s": {
                        "S": "FAILED"
                    }
                },
                "Key": {
                    "id": {
                        "S.$": "$.idempotencyConfig.idempotencyKey"
                    }
                },
                "TableName": "IdempotentStepfunctionsWorkflowStack-IdempotentStepfunctionsWorkflowIdempotencyTable276F57BD-VXO568YJ8PJ7",
                "UpdateExpression": "SET #s = :s, #r = :r"
            },
            "Resource": "arn:aws:states:::dynamodb:updateItem",
            "ResultPath": "$.idempotencyTable.updateErrorResult",
            "Retry": [
                {
                    "BackoffRate": 2,
                    "ErrorEquals": [
                        "DynamoDb.ProvisionedThroughputExceededException",
                        "DynamoDb.RequestLimitExceeded",
                        "DynamoDb.ThrottlingException"
                    ],
                    "IntervalSeconds": 3,
                    "MaxAttempts": 10
                }
            ],
            "Type": "Task"
        },
        "Still IN_PROGRESS, wait for 10s": {
            "Next": "Get idempotency record from DynamoDB",
            "Seconds": 10,
            "Type": "Wait"
        },
        "Success": {
            "Type": "Succeed"
        },
        "Undefined execution state in idempotency record": {
            "Cause": "The idempotency records exists but the executionstatus is neither SUCCEEDED, IN_PROGRESS, or FAILED",
            "Error": "UndefinedExecutionState",
            "Type": "Fail"
        },
        "Your Workflow": {
            "Branches": [
                {
                    "StartAt": "Here",
                    "States": {
                        "(which can fail occasionally)": {
                            "End": true,
                            "Resource": "arn:aws:lambda:eu-central-1:513725428015:function:IdempotentStepfunctionsWo-IdempotencyWorkflowInjec-ptf6qWpoUL4E",
                            "ResultPath": "$.results.randomFailureFunc",
                            "Retry": [
                                {
                                    "BackoffRate": 2,
                                    "ErrorEquals": [
                                        "Lambda.ServiceException",
                                        "Lambda.AWSLambdaException",
                                        "Lambda.SdkClientException"
                                    ],
                                    "IntervalSeconds": 2,
                                    "MaxAttempts": 6
                                }
                            ],
                            "Type": "Task"
                        },
                        "Goes": {
                            "Next": "Your",
                            "Parameters": {
                                "result": "Output of step 2"
                            },
                            "ResultPath": "$.results.step2",
                            "Type": "Pass"
                        },
                        "Here": {
                            "Next": "Goes",
                            "Parameters": {
                                "result": "Output of step 1"
                            },
                            "ResultPath": "$.results.step1",
                            "Type": "Pass"
                        },
                        "Workflow": {
                            "Next": "(which can fail occasionally)",
                            "Parameters": {
                                "result": "Output of step 4"
                            },
                            "ResultPath": "$.results.step4",
                            "Type": "Pass"
                        },
                        "Your": {
                            "Next": "Workflow",
                            "Parameters": {
                                "result": "Output of step 3"
                            },
                            "ResultPath": "$.results.step3",
                            "Type": "Pass"
                        }
                    }
                }
            ],
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "Next": "Save failure",
                    "ResultPath": "$.errors.childworkflow"
                }
            ],
            "Next": "Save execution results",
            "OutputPath": "$.results",
            "ResultSelector": {
                "results.$": "$.[0]"
            },
            "Type": "Parallel"
        }
    }
}